# ۱. انتخاب سیستم‌عامل پایه
# استفاده از یک ایمیج پایه پایتون سبک و پایدار.
# پایتون 3.10 تعادل خوبی بین ویژگی های جدید و پایداری ارائه می دهد.
# '-slim-bullseye' بر اساس دبیان 11 است و apt را برای بسته های سیستمی فراهم می کند.
# اگر همچنان با پایتون 3.11 مشکل دارید، می توانید به جای آن از 'python:3.11-slim-bullseye' استفاده کنید،
# اما باید مطمئن شوید که TA-Lib 0.6.x را در requirements.txt استفاده می کنید.
FROM python:3.10-slim-bullseye

# تنظیم متغیرهای محیطی برای عملیات apt-get غیرتعاملی
ENV DEBIAN_FRONTEND=noninteractive

# ۲. نصب ابزارهای ساخت و وابستگی‌های سطح سیستم برای کتابخانه C TA-Lib.
#    این اولین گام حیاتی برای فعال کردن کامپایل کتابخانه C است.
#    'build-essential' ابزارهایی مانند gcc، make و سایر ابزارهای توسعه اصلی را فراهم می کند. [1, 2, 3]
#    'wget' و 'tar' برای دانلود و استخراج آرشیو کد منبع TA-Lib لازم هستند. [1, 2]
#    'gcc' به صراحت به عنوان کامپایلر C گنجانده شده است. [1, 3]
#    'python3-dev' فایل های هدر لازم برای افزونه های C پایتون را فراهم می کند،
#    که هنگام ساخت پوشش پایتون TA-Lib مورد نیاز هستند. [1, 3]
#    '--no-install-recommends' به حفظ حداقل حجم ایمیج داکر کمک می کند.
#    'rm -rf /var/lib/apt/lists/*' لیست های بسته apt را پاک می کند تا حجم ایمیج را بیشتر کاهش دهد.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        wget \
        tar \
        gcc \
        python3-dev && \
    rm -rf /var/lib/apt/lists/*

# ۳. دانلود، کامپایل و نصب کتابخانه C TA-Lib از کد منبع.
#    این مرحله اصلی برای در دسترس قرار دادن قابلیت های اصلی TA-Lib است.
#    ما به طور موقت دایرکتوری کاری را برای این فرآیند به /tmp تغییر می دهیم.
WORKDIR /tmp
#    'wget' کد منبع C TA-Lib را دانلود می کند. نسخه 0.4.0 در اینجا به دلیل سازگاری گسترده
#    و اشاره مکرر در راهنماهای نصب موفق [4, 1, 2] انتخاب شده است.
#    'tar -xzf' آرشیو منبع فشرده را استخراج می کند.
#    'cd ta-lib' وارد دایرکتوری منبع استخراج شده می شود.
#    './configure --prefix=/usr/local' سیستم ساخت را برای نصب کتابخانه در /usr/local پیکربندی می کند،
#    یک مکان استاندارد سراسری سیستم، که آن را قابل کشف می کند. [4, 1, 2]
#    'make' کد منبع را کامپایل می کند. [4, 1, 2]
#    'make install' فایل های کتابخانه کامپایل شده را در سیستم نصب می کند. [4, 1, 2]
#    'ldconfig' کش کتابخانه مشترک سیستم را به روز می کند. این برای جلوگیری از
#    خطاهای 'ImportError: libta_lib.so.0: cannot open shared object file' در زمان اجرا حیاتی است. [1, 2, 5]
#    'rm -rf /tmp/ta-lib*' منبع دانلود شده و مصنوعات ساخت را پاک می کند تا ایمیج نهایی سبک بماند.
RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && \
    tar -xzf ta-lib-0.4.0-src.tar.gz && \
    cd ta-lib && \
 ./configure --prefix=/usr/local && \
    make && \
    make install && \
    ldconfig && \
    rm -rf /tmp/ta-lib*

# ۴. تنظیم متغیرهای محیطی برای کمک به پوشش پایتون برای یافتن کتابخانه C.
#    این مرحله حیاتی است و باید قبل از نصب پکیج های پایتون انجام شود. [4, 1, 6, 2, 7]
ENV TA_INCLUDE_PATH="/usr/local/include" \
    TA_LIBRARY_PATH="/usr/local/lib" \
    LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"

# ۵. تنظیم دایرکتوری کاری برای برنامه شما در داخل کانتینر.
WORKDIR /app

# ۶. کپی کردن فایل requirements.txt و نصب وابستگی های پایتون.
COPY requirements.txt.
RUN pip install --no-cache-dir -r requirements.txt

# ۷. کپی کردن بقیه کد برنامه شما به داخل کانتینر.
COPY..

# ۸. پورت مورد نظر برنامه شما را آشکار می کند (اگر یک برنامه وب است).
EXPOSE 8000

# ۹. تعریف دستور برای اجرای برنامه شما هنگام شروع کانتینر.
CMD ["python", "your_app_entrypoint.py"]
