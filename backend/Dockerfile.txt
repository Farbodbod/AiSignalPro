# ۱. انتخاب سیستم‌عامل پایه
# استفاده از یک ایمیج پایه پایتون سبک و پایدار.
# پایتون 3.10 تعادل خوبی بین ویژگی های جدید و پایداری ارائه می دهد.
# '-slim-bullseye' بر اساس دبیان 11 است و apt را برای بسته های سیستمی فراهم می کند.
FROM python:3.10-slim-bullseye

# تنظیم متغیرهای محیطی برای عملیات apt-get غیرتعاملی
ENV DEBIAN_FRONTEND=noninteractive

# ۲. نصب ابزارهای ساخت و وابستگی‌های سطح سیستم برای کتابخانه C TA-Lib.
#    این اولین گام حیاتی برای فعال کردن کامپایل کتابخانه C است.
#    'build-essential' ابزارهایی مانند gcc، make و سایر ابزارهای توسعه اصلی را فراهم می کند. [1, 2, 3]
#    'wget' و 'tar' برای دانلود و استخراج آرشیو کد منبع TA-Lib لازم هستند. [2, 3]
#    'gcc' به صراحت به عنوان کامپایلر C گنجانده شده است. [1, 2]
#    'python3-dev' فایل های هدر لازم برای افزونه های C پایتون را فراهم می کند،
#    که هنگام ساخت پوشش پایتون TA-Lib مورد نیاز هستند. [1, 2]
#    '--no-install-recommends' به حفظ حداقل حجم ایمیج داکر کمک می کند.
#    'rm -rf /var/lib/apt/lists/*' لیست های بسته apt را پاک می کند تا حجم ایمیج را بیشتر کاهش دهد.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        wget \
        tar \
        gcc \
        python3-dev && \
    rm -rf /var/lib/apt/lists/*

# ۳. دانلود، کامپایل و نصب کتابخانه C TA-Lib از کد منبع.
#    این مرحله اصلی برای در دسترس قرار دادن قابلیت های اصلی TA-Lib است.
#    ما به طور موقت دایرکتوری کاری را برای این فرآیند به /tmp تغییر می دهیم.
WORKDIR /tmp
#    'wget' کد منبع C TA-Lib را دانلود می کند. نسخه 0.4.0 در اینجا به دلیل سازگاری گسترده
#    و اشاره مکرر در راهنماهای نصب موفق [2, 3, 4] انتخاب شده است.
#    'tar -xzf' آرشیو منبع فشرده را استخراج می کند.
#    'cd ta-lib' وارد دایرکتوری منبع استخراج شده می شود.
#    './configure --prefix=/usr' سیستم ساخت را برای نصب کتابخانه در /usr پیکربندی می کند،
#    یک مکان استاندارد سراسری سیستم، که آن را قابل کشف می کند. [2, 3, 4]
#    'make' کد منبع را کامپایل می کند. [2, 3, 4]
#    'make install' فایل های کتابخانه کامپایل شده را در سیستم نصب می کند. [2, 3, 4]
#    'ldconfig' کش کتابخانه مشترک سیستم را به روز می کند. این برای جلوگیری از
#    خطاهای 'ImportError: libta_lib.so.0: cannot open shared object file' در زمان اجرا حیاتی است. [5, 2, 3, 6]
#    'rm -rf /tmp/ta-lib*' منبع دانلود شده و مصنوعات ساخت را پاک می کند تا ایمیج نهایی سبک بماند.
RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && \
    tar -xzf ta-lib-0.4.0-src.tar.gz && \
    cd ta-lib && \
  ./configure --prefix=/usr && \
    make && \
    make install && \
    ldconfig && \
    rm -rf /tmp/ta-lib*

# ۴. تنظیم دایرکتوری کاری برای برنامه شما در داخل کانتینر.
#    تمام دستورات بعدی نسبت به این دایرکتوری اجرا خواهند شد.
WORKDIR /app

# ۵. کپی کردن فایل requirements.txt و نصب وابستگی های پایتون.
#    این مرحله به صورت استراتژیک پس از نصب کتابخانه C قرار داده شده است.
#    با کپی کردن فقط 'requirements.txt' ابتدا، داکر می تواند این لایه را کش کند. اگر فقط
#    کد برنامه شما بعداً تغییر کند، این لایه (و لایه های قبلی) می تواند دوباره استفاده شود،
#    که سرعت ساخت های بعدی را افزایش می دهد.
COPY requirements.txt.
#    'pip install --no-cache-dir' بسته های پایتون را نصب می کند. '--no-cache-dir'
#    از ذخیره کش pip در داخل ایمیج جلوگیری می کند، که به کاهش
#    حجم نهایی ایمیج کمک می کند.
RUN pip install --no-cache-dir -r requirements.txt

# ۶. کپی کردن بقیه کد برنامه شما به داخل کانتینر.
#    این باید آخرین دستور 'COPY' برای به حداکثر رساندن کارایی کش ساخت داکر باشد.
COPY..

# ۷. پورت مورد نظر برنامه شما را آشکار می کند (اگر یک برنامه وب است).
#    این به داکر اطلاع می دهد که کانتینر در زمان اجرا به پورت های شبکه مشخص شده گوش می دهد.
#    این را با پورت واقعی که برنامه شما استفاده می کند (مثلاً 8000 برای Django، 5000 برای Flask) تنظیم کنید.
EXPOSE 8000

# ۸. تعریف دستور برای اجرای برنامه شما هنگام شروع کانتینر.
#    این دستور پیش فرض است که هنگام اجرای کانتینر داکر اجرا خواهد شد.
#    'your_app_entrypoint.py' را با اسکریپت اصلی پایتون که برنامه شما را شروع می کند جایگزین کنید.
#    برای فریمورک های وب، این معمولاً دستوری برای شروع یک سرور WSGI است، به عنوان مثال،
#    'CMD ["gunicorn", "your_app_module:app", "--bind", "0.0.0.0:8000"]'.
CMD ["python", "your_app_entrypoint.py"]
